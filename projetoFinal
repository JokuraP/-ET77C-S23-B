// Main.c
// Runs on LM4F120/TM4C123
// Use Timer2 in 32-bit periodic mode to request interrupts at a periodic rate
// Daniel Valvano
// March 20, 2014

/* This example accompanies the book
   "Embedded Systems: Real Time Interfacing to Arm Cortex M Microcontrollers",
   ISBN: 978-1463590154, Jonathan Valvano, copyright (c) 2013
  Program 7.5, example 7.6

 Copyright 2013 by Jonathan W. Valvano, valvano@mail.utexas.edu
    You may use, edit, run or distribute this file
    as long as the above copyright notice remains
 THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
 OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 For more information about my classes, my research, and my books, see
 http://users.ece.utexas.edu/~valvano/
 */

// oscilloscope or LED connected to PF3-1 for period measurement
// When using the color wheel, the blue LED on PF2 is on for four
// consecutive interrupts then off for four consecutive interrupts.
// Blue is off for: dark, red, yellow, green
// Blue is on for: light blue, blue, purple, white
// Therefore, the frequency of the pulse measured on PF2 is 1/8 of
// the frequency of the Timer2A interrupts.


//==================================================//
//===TRABALHO FINAL - SISTEMAS MICROCONTROLADOS====//
// ALUNOS: JARDEL MORAES; RA: 1815202
//         PAULA JOKURA;  RA: 2022451


#include "PLL.h"
#include "Timer0.h"
#include "tm4c123gh6pm.h"
#include <stdint.h>
#include "SysTick.h"


void DisableInterrupts(void); // Disable interrupts
void EnableInterrupts(void);  // Enable interrupts
void WaitForInterrupt(void);  // low power mode
void PortFD_Init(void);
unsigned long In; // Ler as mudanças de sina da saída F
volatile uint32_t Contador = 0;
volatile uint32_t T1 = 0;
void PortFD_Init(void){
	volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000028;    // F e D clock
  delay = SYSCTL_RCGC2_R;          // delay   
  GPIO_PORTF_LOCK_R = 0x4C4F434B;  // unlock PortF PF0  
  GPIO_PORTF_CR_R = 0x1F;          // allow changes to PF4-0 
  GPIO_PORTF_AMSEL_R = 0;          // disable analog functionality on PORTF
  GPIO_PORTF_PCTL_R = 0x00000000;  // configure PORTF as GPIO
  GPIO_PORTF_DIR_R |= 0x0E;        // make PF0, PF4 input, PF1-PF3 output
  GPIO_PORTF_AFSEL_R &= ~0x1F;     // disable alt funct 
  GPIO_PORTF_PUR_R = 0x11;         // enable weak pull-up on PF4 and PF0
  GPIO_PORTF_DEN_R |= 0x1F;        // enable digital I/O
	GPIO_PORTF_IS_R &= ~0x01;        // (d) PF0 is edge-sensitive
  GPIO_PORTF_IBE_R = 0x01;       //     PF0 is  both edges
	 GPIO_PORTF_ICR_R = 0x01;         // (e) clear flag4 
  GPIO_PORTF_IM_R |= 0x01;         // (f) arm interrupt on PF0
  NVIC_PRI7_R = (NVIC_PRI7_R&0xFF00FFFF)|0x00A00000; // (g) priority 5
  NVIC_EN0_R = 0x40000000;         // (h) enable interrupt 30 in NVIC
	
	
	//Inicializações porta D
	
  GPIO_PORTD_LOCK_R = 0x4C4F434B;   // 2) unlock PortD PD1  
  GPIO_PORTD_CR_R = 0x02;           // allow changes to PD1       
  GPIO_PORTD_AMSEL_R = 0x00;        // 3) disable analog function
  GPIO_PORTD_PCTL_R = 0x00000000;   // 4) GPIO clear bit PCTL  
  GPIO_PORTD_DIR_R = 0x02;          // 5) PD1 output   
  GPIO_PORTD_AFSEL_R = 0x00;        // 6) no alternate function
  GPIO_PORTD_PUR_R = 0x02;          // enable pullup resistors on PD1       
  GPIO_PORTD_DEN_R = 0x02;          // 7) enable digital pins PD1
}
void GPIOPortF_Handler(void){
	Contador = 1;
  GPIO_PORTF_ICR_R = 0x11;      // acknowledge flag4
	
	
}
void Timer0A_Handler(void){
  
  TIMER0_ICR_R = TIMER_ICR_TATOCINT;		// acknowledge TIMER0A timeout
	T1 = 0;
	TIMER0_ICR_R = 0x00000001;    			// clear TIMER0A timeout flag
	Timer0_Off();
													
}

//debug code
int main(void){ volatile unsigned long delay;
  PLL_Init();                      // bus clock at 80 MHz
	PortFD_Init();										 // initialize PortF
	SysTick_Init();										//Inicializa o Delay
  EnableInterrupts();								//Habilita as interrupções

  while(1){
			
		switch(Contador)
	{
		case 0: 
			
			GPIO_PORTF_DATA_R =0x00 ;  // Apaga os LEDs
			GPIO_PORTD_DATA_R =0x00 ;  // Desliga o Relé 
			WaitForInterrupt();
			break;
		
		case 1:
						GPIO_PORTD_DATA_R =0x00 ;  // Relé desligado
						GPIO_PORTF_DATA_R =0x04 ;  // Liga o LED Azul
						SysTick_Wait10ms(100) ; 	//Espera 1 segundo
						GPIO_PORTF_DATA_R =0x00 ;  // Apaga o LED Azul
						Contador = 2;
		break;
		case 2:
					In = GPIO_PORTF_DATA_R&0x10; // Ler o Estado de PF4(SW1)
		   if(In == 0x10)  						// 0x10 SW1 não precionado 
				 {              
						Contador = 3; // Faz ir para o estado 3
					} 
				 else											// 0x00 SW1 precionado
				{                      
      	Contador = 4; // Faz ir para o estado 1
				}
						
		break;
		case 3:
		
		GPIO_PORTF_DATA_R =0x08 ;  // LED Verde acende
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
			Contador =  1;
		
		break;
		case 4:
			GPIO_PORTD_DATA_R =0x02 ;  // Relé Ligado
			GPIO_PORTF_DATA_R =0x02 ;  // LED vermelho acende
			T1 = 1 ;
			Timer0_Init(640000000); 					 // inicializa o timer com 8 segundos de espera
			
			while(T1 != 0)
			{
			Contador =  4;
			}			
			Contador =  5;
		break;
		case 5:
		GPIO_PORTD_DATA_R =0x00 ;  // Relé Desligado
		//1
		GPIO_PORTF_DATA_R =0x02 ;  // LED vermelho acende
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		GPIO_PORTF_DATA_R =0x00 ;  // LED vermelho Apaga
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		//2
		GPIO_PORTF_DATA_R =0x02 ;  // LED vermelho acende
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		GPIO_PORTF_DATA_R =0x00 ;  // LED vermelho Apaga
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		//3
		GPIO_PORTF_DATA_R =0x02 ;  // LED vermelho acende
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		GPIO_PORTF_DATA_R =0x00 ;  // LED vermelho Apaga
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		//4
		GPIO_PORTF_DATA_R =0x02 ;  // LED vermelho acende
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		GPIO_PORTF_DATA_R =0x00 ;  // LED vermelho Apaga
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		//5
		GPIO_PORTF_DATA_R =0x02 ;  // LED vermelho acende
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		GPIO_PORTF_DATA_R =0x00 ;  // LED vermelho Apaga
		SysTick_Wait10ms(50) ; 	//Espera 0,5 segundos
		//6
		GPIO_PORTF_DATA_R =0x02 ;  // LED vermelho acende
		SysTick_Wait10ms(50) ; 	//Espera 0,6 segundos
		GPIO_PORTF_DATA_R =0x00 ;  // LED vermelho Apaga
		SysTick_Wait10ms(50) ; 	//Espera 0,6 segundos
		Contador =  6;
		break;
		case 6:
				In = GPIO_PORTF_DATA_R&0x10; // Ler o Estado de PF4(SW1)
		   if(In == 0x10)  						// 0x10 SW1 não precionado 
				 {              
						GPIO_PORTF_DATA_R =0x0C ;  // Liga os LEDs Azul e Verde
					 SysTick_Wait10ms(60) ; 	//Espera 0,6 segund0s
					 Contador = 7; // Faz ir para o estado 7
					} 
				 else											// 0x00 SW1 precionado
				{                      
      	Contador = 1; // Faz ir para o estado 1
				}
		break;
		case 7:
			GPIO_PORTF_DATA_R &= ~0x08 ;  // Apaga o LED Verde e mantem o azul ligado
			SysTick_Wait10ms(60) ; 	//Espera 0,6 segund0s
				In = GPIO_PORTF_DATA_R&0x10; // Ler o Estado de PF4(SW1)
		   if(In == 0x10)  						// 0x10 SW1 não precionado 
				 {              
						Contador = 8; // Faz ir para o estado 8
					} 
				 else											// 0x00 SW1 precionado
				{                      
      	Contador = 2; // Faz ir para o estado 2
				}

		break;
				case 8:
		//1
		GPIO_PORTF_DATA_R =0x0E ;  // Os 3 LED acendem
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		GPIO_PORTF_DATA_R =0x00 ;  // Os 3 LED apagam
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		//2
		GPIO_PORTF_DATA_R =0x0E ;  // Os 3 LED acendem
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		GPIO_PORTF_DATA_R =0x00 ;  // Os 3 LED apagam
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		//3
		GPIO_PORTF_DATA_R =0x0E ;  // Os 3 LED acendem
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		GPIO_PORTF_DATA_R =0x00 ;  // Os 3 LED apagam
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		//4
		GPIO_PORTF_DATA_R =0x0E ;  // Os 3 LED acendem
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo
		GPIO_PORTF_DATA_R =0x00 ;  // Os 3 LED apagam
		SysTick_Wait10ms(100) ; 	//Espera 1 segundo

		Contador =  0;
		break;
		default: Contador =  0;
		
	}
	
  }
}

